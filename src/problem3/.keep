- Những điểm kém hiệu quả trong tính toán, các phản hồi trong khối mã và các phiên bản mã đã được cấu trúc lại là:

1. Tên biến "lhsPriority" chưa được khai báo.

2. Mảng "balances" các phần tử "balance(con)" được định dạng theo "interface WalletBalance" vì vậy trường "balance.blockchain" không tồn tại vì interface không có field nào được định nghĩa là "blockchain":
    interface WalletBalance {
        currency: string;
        amount: number;
        blockchain: string; // đoạn mã cũ không có Field này
    }
    const sortedBalances = useMemo(() => {
        return balances.filter((balance: WalletBalance) => {
            const balancePriority = getPriority(balance.blockchain); // thông báo lỗi
            if (lhsPriority > -99) {
                if (balance.amount <= 0) {
                return true;
                }
            }
            return false
            }).sort((lhs: WalletBalance, rhs: WalletBalance) => {
                const leftPriority = getPriority(lhs.blockchain); // thông báo lỗi
            const rightPriority = getPriority(rhs.blockchain);  // thông báo lỗi
            if (leftPriority > rightPriority) {
                return -1;
            } else if (rightPriority > leftPriority) {
                return 1;
            }
        });
    }, [balances, prices]);

3. Biến 'prices' không được sử dụng trong đoạn mã, vì thế không cần thiết bỏ vào mảng dependency trong hook useMemo.

4. Với cách viết code: 
  + Đoạn mã cũ: Trong đoạn mã bên dưới,dòng mã kiểm tra lhsPriority > -99 và sau đó dòng mã kiểm tra balance.amount <= 0. Điều này có nghĩa là cả hai điều kiện phải được kiểm tra riêng lẻ. Nếu lhsPriority lớn hơn -99 nhưng balance.amount không nhỏ hơn hoặc bằng 0, điều kiện vẫn được xem là thỏa mãn.
        if (lhsPriority > -99) {
		    if (balance.amount <= 0) {
		       return true;
		    }
		}
		return false;

  + Đoạn mã mới: Chúng ta có thể sử dụng phép logic && để kết hợp hai điều kiện lại với nhau. Điều này có nghĩa là cả hai điều kiện phải đúng cùng một lúc để điều kiện cuối cùng trả về true. Nếu bất kỳ điều kiện nào không đúng, điều kiện cuối cùng sẽ trả về false.
        return lhsPriority > -99 && balance.amount <= 0;

  => Từ đó ta có thể thấy "Đoạn mã mới" có thể được hiểu và đọc dễ dàng hơn, nó tối ưu hóa mã nguồn hơn, vì nó chỉ yêu cầu một dòng mã.

5. Biến "formattedBalances" khái báo nhưng không được sử dụng.


6. Vì không biết được dữ liệu cụ thể trả về của "const balances = useWalletBalances();" 
    interface WalletBalance {
        currency: string;
        amount: number;
    }
    interface FormattedWalletBalance {
        currency: string;
        amount: number;
        formatted: string;
    }

  + Trường hợp 1: Trả về phần tử định dạng interface WalletBalance
    const rows = sortedBalances.map((balance: FormattedWalletBalance, index: number) => { // lỗi vì balance định dạng interface WalletBalance không có Field formatted như interface FormattedWalletBalance
        const usdValue = prices[balance.currency] * balance.amount;
        return (
        <WalletRow 
            className={classes.row}
            key={index}
            amount={balance.amount}
            usdValue={usdValue}
            formattedAmount={balance.formatted} // lỗi vì không có Field formatted
        />
        )
    })

  + Trường hợp 2: Trả về định dạng interface FormattedWalletBalance: Thì tại sao phải duyệt mảng sortedBalances thêm field "formatted"
   // Vẫn chưa xác định dòng code bên dưới dùng để làm gì ?
   const formattedBalances = sortedBalances.map((balance: WalletBalance) => {
    return {
      ...balance,
      formatted: balance.amount.toFixed() //
    }
  })
    